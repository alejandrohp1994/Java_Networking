/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package networking;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.*;


public class Server implements Runnable {

  //initialize socket and input stream
  private ServerSocket server;
  private ArrayList<ClientConnection> clients;
  private boolean done;

  private ExecutorService pool;

   public Server() {
      clients = new ArrayList<>();
      done = false;
   }

  @Override
  public void run() {
    try {
      server = new ServerSocket(5050);
      if (!server.isClosed()){
        System.out.println("[SERVER] Server started on port " + server.getLocalPort());
      }
      pool = Executors.newCachedThreadPool();
      while (!done) {
         Socket clientSocket = server.accept();
         ClientConnection clientConn = new ClientConnection(clientSocket);
         clients.add(clientConn);
         pool.execute(clientConn);
      }
    } catch (IOException e) {
      shutdown();
    }
  }

  public void broadcastMessage(String message) {
    for (ClientConnection c : clients) {
      if (c != null) {
        c.sendMessage(message);
      }
    }
  }

  public void shutdown() {
   try {
      done = true;
      pool.shutdown();
      if (!server.isClosed()) {
         server.close();
      }
      for (ClientConnection c: clients) {
         c.shutdown();
      }
    } catch (IOException e) {
      // ignore
   }
  }

  class ClientConnection implements Runnable {

    private Socket client;
    private BufferedReader in;
    private PrintWriter out;
    private String nickname;

    public ClientConnection(Socket client) {
      this.client = client;
    }

    @Override
    public void run() {
      try {
        out = new PrintWriter(client.getOutputStream(), true);
        in = new BufferedReader(new InputStreamReader(client.getInputStream()));

        out.println("Please enter username: ");
        nickname = in.readLine();
        System.out.println(nickname + "Connected!");
        broadcastMessage(nickname + " joined the chat!");

        String message;
        while ((message = in.readLine()) != null) {
          if (message.startsWith("/nick ")) {
            String[] messageSplit = message.split(" ", 2);
            if (messageSplit.length == 2) {
               broadcastMessage(nickname + " renamed themselves to " + messageSplit[1]);
              System.out.println(
                nickname + " renamed themselves to " + messageSplit[1]
              );
              nickname = messageSplit[1];
              out.println("Successfully changed nickname to " + nickname);
            }
          } else if (message.startsWith("/quit")) {
            broadcastMessage(nickname + " left the chat!");
            shutdown();
          } else {
            broadcastMessage(nickname + ": " + message);
          }
        }
      } catch (IOException e) {
         shutdown();
      }
    }

    public void sendMessage(String message) {
      System.out.println(message);
    }

    public void shutdown() {
      try {
         in.close();
         out.close();
         if (!client.isClosed()) {
            client.close();
         }
      } catch (IOException e) {
         // ignore
      }
    }
  }
   
  public static void main(String[] args) {

   Server server = new Server();
   server.run();

  }
}
